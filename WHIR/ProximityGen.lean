/-
Copyright (c) 2025 ArkLib Contributors. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Least Authority
-/

import WHIR.ErrCorrCodes

import Mathlib.FieldTheory.Finite.Basic
import Mathlib.Data.Finset.Basic
import Mathlib.Data.Real.Basic
import Mathlib.Probability.ProbabilityMassFunction.Basic
import Mathlib.Probability.Distributions.Uniform

structure Gen
  {F : Type*} [Field F] [Fintype F] [DecidableEq F]
  {Œπ : Type*} [Fintype Œπ]
  (C : LinearCode F Œπ)
  (l : ‚Ñï) where
    Smpl   : F ‚Üí (Fin l ‚Üí F)
    BStar  : ‚Ñù
    err    : {Œ¥ : ‚Ñù // 0 < Œ¥ ‚àß Œ¥ < 1 - BStar} ‚Üí ‚Ñù


namespace Gen

variable {F : Type*} [Field F] [Fintype F] [DecidableEq F]
         {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ]

/- Given coefficients r_0,...,r_{l-1} and functions f_0,...f_{l-1}: Œπ ‚Üí ùîΩ, compute
   the linear combination f(x) = ‚àë_{i=0}^{l-1} r_i ‚Ä¢ f_i(x)   -/
def linComb {‚Ñì : ‚Ñï} (r : Fin ‚Ñì ‚Üí F) (f : Fin ‚Ñì ‚Üí Œπ ‚Üí F) : Œπ ‚Üí F :=
  fun x => ‚àë i, r i * f i x

/- WORK IN PROGRESS-/
def isProximityGenerator
    {‚Ñì : ‚Ñï}
    {C : LinearCode F Œπ}
    (G : Gen C ‚Ñì) : Prop :=
      ‚àÄ (f : Fin ‚Ñì ‚Üí Œπ ‚Üí F) (Œ¥ : {Œ¥ : ‚Ñù // 0 < Œ¥ ‚àß Œ¥ < 1 - G.BStar}),
      ((PMF.uniformOfFintype F).toOuterMeasure
        { r | r = r} ) >
        G.err Œ¥ ‚Üí True

end Gen


-- EXAMPLE USAGE:

/-- The generic *monomial sampler*
    `x ‚Ü¶ (1, x, x¬≤, ‚Ä¶ , x^(l-1))` realised as a function
    `Fin l ‚Üí F`. -/
def monomialSmpl
    {F : Type*} [Field F] (l : ‚Ñï) (x : F) : Fin l ‚Üí F :=
  fun i => x ^ (i : ‚Ñï)        -- `i` coerces to a natural number

variable {F : Type*} [Field F] [Fintype F] [DecidableEq F]
variable {Œπ : Type*} [Fintype Œπ]

/-- **Proximity generator with monomial sampling**
    * `l` is kept abstract;
    * `Smpl` is `monomialSmpl l`;
    * `BStar = 0.1`;
    * `err Œ¥ = Œ¥¬≤`. -/
noncomputable def ProximityGen.monomial
    (C : LinearCode F Œπ) (l : ‚Ñï) : ProximityGen C l where
  Smpl  := monomialSmpl l
  BStar := (1 : ‚Ñù) / 10        -- 0.1
  err   := fun Œ¥ => (Œ¥.1) ^ 2  -- square the underlying real number


/-
\begin{definition}[Proximity generator]\label{def:proximity-generator}
Let $\mathcal{C}\subseteq\mathbb{F}^{n}$ be a linear code.
We say that $\operatorname{Gen}$ is a \emph{proximity generator} for $\mathcal{C}$
with proximity bound $B$ and error $\operatorname{err}$ if the following implication
holds for every tuple of functions $f_{1},\dots ,f_{\ell}:[n]\to\mathbb{F}$ and every
$\delta\in (0,1-B(\mathcal{C},\ell))$.
If
\[
  \Pr_{(r_{1},\dots ,r_{\ell})\;\gets\;\operatorname{Gen}(\ell)}
  \!\Bigl[
      \Delta\!\Bigl(\textstyle\sum_{i\in[\ell]} r_{i}\cdot f_{i},\; \mathcal{C}\Bigr)
      \le \delta
  \Bigr]
  > \operatorname{err}(\mathcal{C},\ell,\delta),
\]
then there exists a set $S\subseteq[n]$ with $|S|\ge (1-\delta)\,n$ such that
\[
  \forall i\in[\ell]\; \exists\,u\in\mathcal{C}\;\text{ with }\;
        \forall x\in S,\; f_{i}(x)=u(x).
\]
\end{definition}


-/
